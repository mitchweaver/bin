#!/usr/bin/env bash
#
# http://github.com/mitchweaver/bin
#
#    ████         ██     
#   ░██░         ░██     
#  ██████  █████ ░██     
# ░░░██░  ██░░░██░██████ 
#   ░██  ░██  ░░ ░██░░░██
#   ░██  ░██   ██░██  ░██
#   ░██  ░░█████ ░██  ░██
#   ░░    ░░░░░  ░░   ░░ 
#
# yet another fetch script
#
# Supports Linux and OpenBSD
#
# * Work in progress *
#
# --- Example output: ------
#
# [tmp] $ ./fch
# ┌─────────────────────────────────────┐
# │   mitch@dankpad.local.wvr.sh       │
# ├─────────────────────────────────────┤
# │   ThinkPad X1 Carbon 7th           │
# │   Gentoo 6.2.11-zen1-x86_64        │
# │   1034                             │
# │   dwm                              │
# │   kitty                            │
# │   oksh                             │
# │   i5-8365U                         │
# │   3.7G/8.2G                        │
# │   52.0G/234G (22%)                 │
# │   0.79 0.68 0.32                   │
# │   68.7°C                           │
# └─────────────────────────────────────┘
#
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

# openbsd compat
if ! command -v seq >/dev/null ; then
    seq() {
        jot "$@"
    }
fi

# shellcheck disable=2030,2034
pr_space() {
    df -h 2>/dev/null | \
    while read -r drive size used _ perc mountpoint _ ; do
        # only print line if drive is a physical device
        case ${drive##*/} in
            sd*|nvme*|rpool/*/root)
                case $mountpoint in
                    */boot|*/efi)
                        # ignore
                        ;;
                    *)
                        printf "│   %s/%s " "$used" "$size" #"$perc"
                        for i in $(seq $((length - ${#used} - ${#size} - 1)) ) ; do
                            printf ' '
                        done
                        printf ' │\n'
                esac
        esac
    done
}

# idea to get terminal font
# get_font() {
#     font=$(strings <$(which st) | grep 'pixelsize=')
#     printf '%s\n' "${font%%:*}"
# }

mem() {
    case $(uname) in
        OpenBSD)
# shellcheck disable=2034
read -r _ _ real _ _ free _ cache _ swap <<EOF
$(top -n | grep Memory)
EOF

            # real is displayed as "real"/"real+cache"
            # we just want to output "real", dont care about
            # amount used as cached
            real=${real%/*}
            used=${real%M}

            # reverse goes for swap
            swap=${swap#*/}

            case $free in
                *M)
                    free=${free%M}
                    ;;
                *G)
                    free=${free%G}000
            esac

            total=$(( used + free + ${cache%M} + ${swap%M} ))

            # convert back to bytes for human to work below
            used=$(( used * 1000 ))
            total=$(( total * 1000 ))
            ;;
        Linux)
        # Get memory information by parsing /proc/meminfo.
        # Idea from pfetch, (dylan)
        #
        # Formula: MemUsed = MemTotal + Shmem - MemFree - Buffers - Cached - SReclaimable
        # Source: https://github.com/KittyKatt/screenFetch/issues/386
        #
        # Only works on Linux.
        #
        # shellcheck disable=2031
        #
        # Parse the '/proc/meminfo' file splitting on ':' and 'k'.
        # The format of the file is 'key:   000kB' and an additional
        # split is used on 'k' to filter out 'kB'.
        while IFS=':k ' read -r key val _ ; do
            case $key in
                MemTotal|Shmem)
                    total=$((total + val))
                    used=$((used + val))
                    ;;
                MemFree|Buffers|Cached|SReclaimable)
                    used=$((used - val))
            esac
        done </proc/meminfo
    esac
    printf '%s/%s\n' \
        "$(printf '%s\n' "$((used * 1024))"  | human)" \
        "$(printf '%s\n' "$((total * 1024))" | human)"

}

get_temp() {
    case $(uname) in
        OpenBSD)
            tmp=$(sysctl -n hw.sensors.cpu0.temp0)
            printf '%s°C\n' "${tmp%.*}"
            ;;
        Linux)
            if command -v temp >/dev/null ; then
                temp
            else
                read -r tmp </sys/class/thermal/thermal_zone0/temp
                printf '%s°C\n' "${tmp%???}"
            fi
    esac
}

model() {
    case $(uname) in
        OpenBSD)
            m=$(sysctl -n hw.version)
            ;;
        Linux)
            if [ -f /sys/firmware/devicetree/base/model ] ; then
                read -r m < /sys/firmware/devicetree/base/model
            elif [ -f /sys/devices/virtual/dmi/id/product_name ] ; then
                read -r m </sys/devices/virtual/dmi/id/product_family
            fi
    esac
    case $m in
        *'To be filled by O.E.M.'*)
            m=Desktop
    esac
    printf '%s\n' "$m"
}

os() {
      if command -v pkg_add    >/dev/null ; then os=OpenBSD
    elif command -v pkgin      >/dev/null ; then os=NetBSD
    elif command -v apk        >/dev/null ; then os=Alpine
    elif command -v crux       >/dev/null ; then os=CRUX
    elif command -v xbps-query >/dev/null ; then os=Void
    elif command -v ubuntu-bug >/dev/null ; then os=Ubuntu
    elif command -v apt-get    >/dev/null ; then os=Debian
    elif command -v emerge     >/dev/null ; then os=Gentoo ; fi
    kern=$(uname -r)
    # kern=${kern%%-*}
    printf '%s %s\n' "$os" "$kern"
}

pr_line() {
    buf=$1
    # SC: "i is unused"
    # shellcheck disable=2034
    for i in r i c i n g $(seq "$3") ; do
        buf="$buf─"
    done
    printf '%s\n' "$buf$2"
}

pr_host() {
    h=$(hostname)
    host=$USER@$h
    printf '│   %s' "$host"

    # fix this mess later, for now it works
    #
    # SC: "i is unused"
    # shellcheck disable=2034
    for i in _ _ $(seq $(($1 - ${#host}))) ; do
        printf ' '
    done

    printf '%s\n' '│'
}

pr_str() {
    # print emoji
    printf '│ %s  ' "$1"
    printf "%s" "$2"

    # print str
    # print spaces to fit $length
    space_needed=$(( length - ${#2} + 2 ))

    # This symbol counts as "2" chars...
    # Bizarre. Look into why later.
    case $2 in
        *''*)
            space_needed=$((space_needed + 2))
    esac

    # shellcheck disable=2034
    for i in $(seq $space_needed) ; do
        printf ' '
    done

    # close and newline
    printf '│\n'
}

get_length() {
    host=$(hostname)
    host_len=$((5 + ${#USER} + 1 + ${#host}))
    if [ ${#model} -ge $host_len ] ; then
        echo ${#model}
    else
        echo $host_len
    fi
}

get_packages() {
    case $(os) in
        Gentoo*)
            qlist -I | wc -l
            ;;
        OpenBSD*)
            pkg_info -l | wc -l
    esac
}

get_wm() {
    for i in i3 dwm openbox fvwm icewm xfwm fluxbox budgie pantheon gnome ; do
        if pgrep $i >/dev/null ; then
            echo $i
            return
        fi
    done

    echo "unknown"
}

get_loadavg() {
    if [ -e /proc/loadavg ] ; then
        read -r _load < /proc/loadavg
        # shellcheck disable=2086
        set -- $_load
        printf "%s %s %s\n" "$1" "$2" "$3"
    else
        echo 'unknown'
    fi
}

get_cpu() {
    # intel for now
    if [ -e /proc/cpuinfo ] ; then
        cpu=$(grep 'model name' /proc/cpuinfo)
        cpu=${cpu##*\) }
        cpu=${cpu%% CPU \@*}
        printf '%s\n' "$cpu"
    else
        echo 'unknown'
    fi
}

get_term() {
    # shellcheck disable=2046
    pid2name $(getppid $(getppid $$))
}

get_storage() {
    if command -v zpool >/dev/null ; then
        if zpool list | grep rpool >/dev/null ; then
            zpool list | grep rpool | \
            while read -r pool total used remaining _ _ frag perc_used _ ; do
                printf '%s/%s (%s)\n' "$used" "$total" "$perc_used"
            done
        else
            >&2 echo "can't find root zfs pool, is it not named rpool?"
        fi
    else
        >&2 "non-zfs not implemented yet"
    fi
}

get_toolchain() {
    gcc -dumpmachine
}

model=$(model)
os=$(os)
pkgs=$(get_packages)
temp=$(get_temp)
mem=$(mem)
shell=${SHELL##*/}
wm=$(get_wm)
length=$(get_length)
loadavg=$(get_loadavg)
cpu=$(get_cpu)
term=$(get_term)
storage=$(get_storage)
toolchain=$(get_toolchain)

# print top borders
pr_line ┌ ┐ "$length"
pr_host     "$length"
pr_line ├ ┤ "$length"

case $(uname) in
    OpenBSD)
        emoji=🐡
        ;;
    *BSD)
        emoji=
        ;;
    Linux)
        case $(os) in
            Gentoo*) emoji= ;;
            Ubuntu*) emoji= ;;
            Fedora*) emoji= ;;
                  *) emoji=
        esac
esac

# print content
pr_str "" "$model"
pr_str "$emoji" "$os"
pr_str "" "$toolchain"
pr_str "" "$pkgs"
pr_str "" "$wm"
pr_str "" "$term"
pr_str "" "$shell"
pr_str "" "$cpu"
pr_str "" "$mem"
pr_str "" "$storage"
pr_str "" "$loadavg"
pr_str "" "$temp"
pr_space

# print bottom borders
pr_line └ ┘ "$length"
